@page "/CreateProfile"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject ProfileService ProfileService
@inject IJSRuntime JSRuntime
@inject AppState AppState

<PageTitle>Профиль</PageTitle>

<h1>@(AppState.CurrentProfile != null ? "Редактировать профиль" : "Добавить профиль")</h1>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<div class="profile-form">
    <div class="form-group">
        <label for="Name">Имя:</label>
        <input id="Name" class="form-control" @bind="NewProfile.Name" />
    </div>
    <div class="form-group">
        <label for="Age">Возраст:</label>
        <input id="Age" type="number" class="form-control" @bind="NewProfile.Age" />
    </div>
    <div class="form-group">
        <label for="Gender">Пол:</label>
        <select id="Gender" class="form-control" @bind="NewProfile.Gender">
            <option value="Мужской">Мужской</option>
            <option value="Женский">Женский</option>
        </select>
    </div>
    <div class="form-group">
        <label for="Description">Описание:</label>
        <textarea id="Description" class="form-control" @bind="NewProfile.Description"></textarea>
    </div>
    <div class="form-group">
        <label for="ImageUrl">Ссылка на фото:</label>
        <input id="ImageUrl" class="form-control" @bind="NewProfile.ImageUrl" />
    </div>
    <div class="form-group">
        <label for="Interests">Интересы (через запятую):</label>
        <input id="Interests" class="form-control" @bind="InterestsInput" />
    </div>
    <button class="btn btn-primary" @onclick="SaveProfile">@(AppState.CurrentProfile != null ? "Сохранить" : "Добавить")</button>
    @if (AppState.CurrentProfile != null)
    {
        <button class="btn btn-danger" @onclick="DeleteProfile">Удалить</button>
    }
</div>

@code {
    private Profile NewProfile { get; set; } = new Profile();
    private string InterestsInput { get; set; } = string.Empty;
    private string ErrorMessage { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (AppState.CurrentProfile != null)
        {
            // Загружаем данные текущего профиля для редактирования
            NewProfile = AppState.CurrentProfile;
            InterestsInput = string.Join(", ", NewProfile.Interests.Select(i => i.SelectedInterestString));
        }
    }

    private async Task SaveProfile()
    {
        // Преобразуем строку интересов в список
        NewProfile.Interests = InterestsInput
            .Split(',')
            .Select(x => new Interests { SelectedInterestString = x.Trim() })
            .ToList();

        if (AppState.CurrentProfile == null)
        {
            // Добавляем новый профиль
            await ProfileService.AddProfileAsync(NewProfile);
        }
        else
        {
            // Обновляем существующий профиль
            await ProfileService.UpdateProfileAsync(NewProfile);
        }

        NavigationManager.NavigateTo("/");
    }

    private async Task DeleteProfile()
    {
        if (AppState.CurrentProfile != null)
        {
            // Удаляем профиль
            await ProfileService.DeleteProfileAsync(AppState.CurrentProfile.Id);
            await AppState.ClearCurrentProfileAsync();
            NavigationManager.NavigateTo("/");
        }
    }
}