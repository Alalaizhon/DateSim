@page "/"
@attribute [Authorize]
@inject ProfileService ProfileService
@inject AppState AppState
@inject NavigationManager NavManager
@rendermode InteractiveServer
@inject ILogger<Chat> Logger

<h1 class="title">Симулятор свиданий</h1>
<h3>Список Профилей</h3>

<!-- Поиск по имени -->
<div class="search-container">
    <label for="search-name">Поиск по имени:</label>
    <input id="search-name" class="form-control" @bind:get="SearchQuery" @bind:set="OnSearchQueryChanged" @bind:event="oninput" placeholder="Введите имя" />
</div>

<!-- Фильтр по интересам -->
<div class="filter-container">
    <label for="interest-filter">Фильтровать по интересам:</label>
    <select id="interest-filter" @onchange="async (e) => await FilterProfiles(e)">
        <option value="all">Выберите интерес</option>
        @foreach (var interest in GetAllInterests())
        {
            <option value="@interest">@interest</option>
        }
    </select>
</div>

<!-- Выбор профиля для входа -->
<div class="login-container">
    <label for="profile-select">Выберите профиль:</label>
    <select id="profile-select" @bind="SelectedProfileId">
        <option value="">Выберите профиль</option>
        @foreach (var profile in FilteredProfiles)
        {
            <option value="@profile.Id">@profile.Name</option>
        }
    </select>
    <button @onclick="Login" disabled="@(SelectedProfileId == null)">Войти в профиль</button>
</div>

<!-- Список профилей -->
<h2 class="subtitle">Профили</h2>
@if (FilteredProfiles.Any())
{
    <div class="profile-container">
        @foreach (var profile in FilteredProfiles)
        {
            <div class="profile-card">
                <div class="profile-image">
                    <img src="@profile.ImageUrl" alt="@profile.Name" />
                </div>
                <div class="profile-details">
                    <h2>@profile.Name</h2>
                    <ul>
                        <li>Возраст: @profile.Age</li>
                        <li>Пол: @profile.Gender</li>
                    </ul>
                    <h3>Интересы:</h3>
                    <ul>
                        @foreach (var interest in profile.Interests)
                        {
                            <li>@interest.SelectedInterestString</li>
                        }
                    </ul>
                    <p>@profile.Description</p>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="alert alert-info">Профили не найдены!</div>
}

@code {
    private List<Profile> FilteredProfiles { get; set; } = new List<Profile>();
    private IEnumerable<Profile> Profiles = new List<Profile>();
    private string CurrentFilter { get; set; } = "all";
    private string SearchQuery { get; set; } = string.Empty;
    private int? SelectedProfileId { get; set; } = null;

    protected override void OnInitialized()
    {
        FilteredProfiles = Profiles.ToList(); // Инициализируем FilteredProfiles
    }

    protected override async Task OnInitializedAsync()
    {
        Profiles = await ProfileService.GetProfilesAsync();
        if (Profiles != null) // Проверка на null
        {
            FilteredProfiles = Profiles.ToList(); // Обновляем FilteredProfiles после загрузки данных
        }
    }

    private async Task Login()
    {
        if (SelectedProfileId.HasValue)
        {
            var profile = Profiles.FirstOrDefault(p => p.Id == SelectedProfileId);
            if (profile != null && AppState != null) // Проверка на null
            {
                Logger.LogInformation("Переход на чат"); // Логирование
                await AppState.SetCurrentProfileAsync(profile); // Используем await
                NavManager.NavigateTo("/chat");
            }
        }
    }

     // Поиск профилей по имени
    private async Task SearchProfiles()
    {
        if (string.IsNullOrWhiteSpace(SearchQuery))
        {
            // Если поисковый запрос пуст, показываем все профили
            FilteredProfiles = await ProfileService.FilterProfilesAsync(profile => true);
        }
        else
        {
            // Фильтруем профили по имени (игнорируем регистр и пробелы)
            var trimmedQuery = SearchQuery.Trim();
            FilteredProfiles = await ProfileService.FilterProfilesAsync(profile =>
                profile.Name.Trim().Contains(trimmedQuery, StringComparison.OrdinalIgnoreCase));
        }
    }

    // Обработка изменения поискового запроса
    private async Task OnSearchQueryChanged(string value)
    {
        SearchQuery = value; // Обновляем SearchQuery
        await SearchProfiles(); // Выполняем поиск
    }

    // Фильтрация профилей по интересам
    private async Task FilterProfiles(ChangeEventArgs e)
    {
        var selectedInterest = e.Value?.ToString();

        if (selectedInterest == "all")
        {
            // Если выбран "all", показываем все профили
            FilteredProfiles = await ProfileService.GetProfilesAsync();
        }
        else
        {
            // Фильтруем профили по интересам
            FilteredProfiles = await ProfileService.SearchProfilesByInterestAsync(selectedInterest);
        }
    }

    // Получаем уникальные строковые значения интересов
    private IEnumerable<string> GetAllInterests()
    {
        if (Profiles == null)
        {
            return Enumerable.Empty<string>();
        }

        return Profiles
            .SelectMany(profile => profile.Interests
                .Where(i => !string.IsNullOrEmpty(i.SelectedInterestString))
                .Select(i => i.SelectedInterestString!))
            .Distinct();
    }
}