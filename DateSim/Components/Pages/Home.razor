@page "/"
@attribute [Authorize]
@inject ProfileService ProfileService
@rendermode InteractiveServer

<h1 class="title">Симулятор свиданий</h1>
<h3>Список Профилей</h3>

<div class="filter-container">
    <label for="interest-filter">Фильтровать по интересам:</label>
    <select id="interest-filter" @onchange="FilterProfiles">
        <option value="all">Выберите интерес</option>
        @foreach (var interest in GetAllInterests())
        {
            <option value="@interest">@interest</option>
        }
    </select>
</div>

<!-- Список профилей -->
<h2 class="subtitle">Профили</h2>
@if (FilteredProfiles.Any())
{
    <div class="profile-container">
        @foreach (var profile in FilteredProfiles)
        {
            <div class="profile-card">
                <div class="profile-image">
                    <img src="@profile.ImageUrl" alt="@profile.Name" />
                </div>
                <div class="profile-details">
                    <h2>@profile.Name</h2>
                    <ul>
                        <li>Возраст: @profile.Age</li>
                        <li>Пол: @profile.Gender</li>
                    </ul>
                    <h3>Интересы:</h3>
                    <ul>
                        @foreach (var interest in profile.Interests)
                        {
                            <li>@interest.SelectedInterestString</li>
                        }
                    </ul>
                    <p>@profile.Description</p>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="alert alert-info">Профили с выбранным интересом не найдены!</div>
}

@code
{
    // Список других профилей и фильтр
    private List<Profile> FilteredProfiles { get; set; } = new List<Profile>();
    private IEnumerable<Profile> Profiles = new List<Profile>();
    private string CurrentFilter { get; set; } = "all";

    protected override void OnInitialized()
    {
        FilteredProfiles = Profiles.ToList(); // Инициализируем FilteredProfiles
    }
    protected override async Task OnInitializedAsync()
    {
        Profiles = await ProfileService.GetProfilesAsync();
       
    }

    // Фильтрация профилей
    private void FilterProfiles(ChangeEventArgs e)
    {
        var selectedInterest = e.Value?.ToString();

        if (selectedInterest == "all")
        {
            FilteredProfiles = Profiles.ToList(); // Показываем все профили
        }
        else
        {
            FilteredProfiles = Profiles
                .Where(profile => profile.Interests.Any(interest => interest.SelectedInterestString == selectedInterest))
                .ToList();
        }
    }

    // Получаем уникальные строковые значения интересов
    private IEnumerable<string> GetAllInterests()
    {
        if (Profiles == null)
        {
            return Enumerable.Empty<string>();
        }

        return Profiles
            .SelectMany(profile => profile.Interests
                .Where(i => !string.IsNullOrEmpty(i.SelectedInterestString))
                .Select(i => i.SelectedInterestString!))
            .Distinct();

    }
    
}